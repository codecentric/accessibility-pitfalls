{"version":3,"sources":["SideNavigation.js","TopNavigation.js","SalutationFormGroup.js","NameFormGroup.js","ProfilePageContent.js","App.js","index.js"],"names":["SideNavigation","tabIndex","evolution","undefined","Nav","className","activeKey","onSelect","selectedKey","Item","Link","href","TopNavigation","color","Navbar","bg","variant","Container","Brand","style","Toggle","Collapse","Text","SALUTATIONS","SIMPLE","FIRST_NAME","COMPLETE_NAME","CUSTOM","MISTER","MISSES","SalutationFormGroup","setFieldValue","values","salutations","firstName","lastName","customSalutation","Form","Group","as","Row","Label","column","sm","Col","Object","keys","map","salutation","isCustomOption","isCustomOptionActive","label","type","placeholder","value","onChange","e","target","Check","checked","name","id","NameFormGroup","isNameSeparated","handleChange","handleBlur","touched","errors","Control","onBlur","isValid","isInvalid","Feedback","completeName","ProfilePageContent","profileYupSchema","yup","shape","oneOf","required","min","matches","emailAddress","email","gender","marginBottom","validationSchema","onSubmit","formikBag","setSubmitting","setTimeout","alert","JSON","stringify","initialValues","handleSubmit","isSubmitting","noValidate","controlId","Select","disabled","Button","App","useState","selectedEvolution","setEvolution","height","marginTop","md","span","offset","ButtonGroup","position","bottom","left","Array","from","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03006f93.chunk.js","sourcesContent":["import Nav from 'react-bootstrap/Nav'\n\nexport const SideNavigation = ({ evolution }) => {\n    const tabIndex = evolution === 0 ? '-1' : undefined\n\n    return (\n        <Nav\n            className=\"d-md-block bg-light sidebar\"\n            activeKey=\"/my-profile\"\n            onSelect={(selectedKey) => null}\n        >\n            <div className=\"sidebar-sticky\"></div>\n            <Nav.Item>\n                <Nav.Link tabIndex={tabIndex} href=\"#profile\">\n                    My Profile\n                </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link tabIndex={tabIndex} href=\"#settings\">\n                    Settings\n                </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link tabIndex={tabIndex} href=\"#security\">\n                    Security\n                </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link tabIndex={tabIndex} href=\"#notifications\">\n                    Notifications\n                </Nav.Link>\n            </Nav.Item>\n        </Nav>\n    )\n}\n","import Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\nimport Nav from 'react-bootstrap/Nav'\n\nexport const TopNavigation = ({ evolution }) => {\n    const tabIndex = evolution === 0 ? '-1' : undefined\n    const color = evolution === 0 ? '#73A1FF' : '#F8F8FF'\n\n    return (\n        <Navbar bg=\"primary\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"#dashboard\" tabIndex={tabIndex}>\n                    Sportify\n                </Navbar.Brand>\n                <Nav className=\"me-auto\">\n                    <Nav.Link\n                        style={{ color }}\n                        href=\"#dashboard\"\n                        tabIndex={tabIndex}\n                    >\n                        Dashboard\n                    </Nav.Link>\n                    <Nav.Link\n                        style={{ color }}\n                        href=\"#training\"\n                        tabIndex={tabIndex}\n                    >\n                        Training\n                    </Nav.Link>\n                    <Nav.Link\n                        style={{ color }}\n                        href=\"#explore\"\n                        tabIndex={tabIndex}\n                    >\n                        Explore\n                    </Nav.Link>\n                </Nav>\n                <Navbar.Toggle />\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Navbar.Text style={{ color }}>\n                        Signed in as:{' '}\n                        <a href=\"#profile\" tabIndex={tabIndex}>\n                            Emily Hû\n                        </a>\n                    </Navbar.Text>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n","import Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nexport const SALUTATIONS = {\n    SIMPLE: 'SIMPLE',\n    FIRST_NAME: 'FIRST_NAME',\n    COMPLETE_NAME: 'COMPLETE_NAME',\n    CUSTOM: 'CUSTOM',\n    MISTER: 'MISTER',\n    MISSES: 'MISSES',\n}\n\nexport const SalutationFormGroup = ({ setFieldValue, values }) => {\n    const salutations = {\n        [SALUTATIONS.FIRST_NAME]: `Hey ${values.firstName}!`,\n        [SALUTATIONS.COMPLETE_NAME]: `Hey ${values.firstName} ${values.lastName}!`,\n        [SALUTATIONS.SIMPLE]: `Hey there!`,\n        [SALUTATIONS.MISSES]: `Hey Mrs. ${values.lastName}!`,\n        [SALUTATIONS.MISTER]: `Hey Mr. ${values.lastName}!`,\n        [SALUTATIONS.CUSTOM]: `Hey ${\n            values.customSalutation || '(custom name)'\n        }`,\n    }\n\n    return (\n        <fieldset>\n            <Form.Group as={Row} className=\"mb-3\">\n                <Form.Label as=\"legend\" column sm={2} className=\"text-muted\">\n                    Salutation *\n                </Form.Label>\n\n                <Col sm={10}>\n                    {Object.keys(salutations).map((salutation) => {\n                        const isCustomOption = salutation === 'CUSTOM'\n                        const isCustomOptionActive =\n                            values.salutation === 'CUSTOM'\n                        const label = isCustomOption ? (\n                            isCustomOptionActive ? (\n                                <>\n                                    Hey{' '}\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"some custom name\"\n                                        value={values.customSalutation}\n                                        onChange={(e) =>\n                                            setFieldValue(\n                                                'customSalutation',\n                                                e.target.value,\n                                            )\n                                        }\n                                    />\n                                </>\n                            ) : (\n                                salutations[salutation]\n                            )\n                        ) : (\n                            salutations[salutation]\n                        )\n\n                        return (\n                            <Form.Check\n                                key={salutation}\n                                type=\"radio\"\n                                tabIndex=\"-1\"\n                                className=\"mb-2\"\n                                onChange={() => {\n                                    setFieldValue('salutation', salutation)\n                                }}\n                                label={label}\n                                checked={values.salutation === salutation}\n                                name=\"formHorizontalRadios\"\n                                id=\"formHorizontalRadios1\"\n                            />\n                        )\n                    })}\n                </Col>\n            </Form.Group>\n        </fieldset>\n    )\n}\n","import Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nexport const NameFormGroup = ({\n    isNameSeparated,\n    tabIndex,\n    handleChange,\n    handleBlur,\n    touched,\n    errors,\n    values,\n}) => {\n    if (isNameSeparated) {\n        return (\n            <Form.Group as={Row} className=\"mb-3\">\n                <Form.Label column sm=\"2\" className=\"text-muted\">\n                    Name *\n                </Form.Label>\n                <Col sm=\"5\">\n                    <Form.Control\n                        tabIndex={tabIndex}\n                        type=\"text\"\n                        value={values.firstName}\n                        name=\"firstName\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        isValid={touched.firstName && !errors.firstName}\n                        isInvalid={!!errors.firstName}\n                        placeholder=\"First name\"\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.firstName}\n                    </Form.Control.Feedback>\n                </Col>\n                <Col sm=\"5\">\n                    <Form.Control\n                        tabIndex={tabIndex}\n                        type=\"text\"\n                        name=\"lastName\"\n                        value={values.lastName}\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        isInvalid={!!errors.lastName}\n                        isValid={touched.lastName && !errors.lastName}\n                        placeholder=\"Last name\"\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.lastName}\n                    </Form.Control.Feedback>\n                </Col>\n            </Form.Group>\n        )\n    }\n\n    return (\n        <Form.Group as={Row} className=\"mb-3\">\n            <Form.Label column sm=\"2\" className=\"text-muted\">\n                Name *\n            </Form.Label>\n            <Col sm=\"10\">\n                <Form.Control\n                    tabIndex={tabIndex}\n                    type=\"text\"\n                    value={values.completeName}\n                    name=\"completeName\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    isValid={touched.completeName && !errors.completeName}\n                    isInvalid={!!errors.completeName}\n                    placeholder=\"Name\"\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                    {errors.completeName}\n                </Form.Control.Feedback>\n            </Col>\n        </Form.Group>\n    )\n}\n","import { Formik } from 'formik'\nimport Form from 'react-bootstrap/Form'\nimport { SalutationFormGroup, SALUTATIONS } from './SalutationFormGroup'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport * as yup from 'yup'\nimport { NameFormGroup } from './NameFormGroup'\n\nexport const ProfilePageContent = ({ evolution }) => {\n    const tabIndex = evolution === 0 ? '-1' : undefined\n    const isNameSeparated = evolution < 2\n    const profileYupSchema = yup.object().shape({\n        salutation: yup\n            .string()\n            .oneOf(\n                Object.keys(SALUTATIONS),\n                'Must be one of the provided options',\n            ),\n        customSalutation: yup.string(),\n        firstName: isNameSeparated\n            ? yup\n                  .string()\n                  .required('First name is required')\n                  .min(3, 'Not long enough')\n                  .matches(/^[a-zA-Z]+$/, 'No special characters please')\n            : undefined,\n        lastName: isNameSeparated\n            ? yup\n                  .string()\n                  .required('Last name is required')\n                  .min(3, 'Not long enough')\n                  .matches(/^[a-zA-Z]+$/, 'No special characters please')\n            : undefined,\n        completeName: isNameSeparated\n            ? undefined\n            : yup.string().required('Name is required'),\n        emailAddress: yup\n            .string()\n            .email('Please provide a valid email address')\n            .required('Email address is required'),\n        gender: yup.string().oneOf(['MALE', 'FEMALE'], 'Gender is required'),\n    })\n\n    return (\n        <>\n            <div className=\"h2\" style={{ marginBottom: 40 }}>\n                My Profile\n            </div>\n\n            <Formik\n                validationSchema={profileYupSchema}\n                onSubmit={(values, formikBag) => {\n                    const { setSubmitting } = formikBag\n                    setTimeout(() => {\n                        alert(JSON.stringify(values, null, 2))\n                        setSubmitting(false)\n                    }, 100)\n                }}\n                initialValues={{\n                    salutation: 'FIRST_NAME',\n                    customSalutation: '',\n                    firstName: 'Emily',\n                    lastName: 'Hû',\n                    completeName: 'Emily Hû',\n                    gender: 'MALE',\n                    emailAddress: 'emily.hu@icloud.com',\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    values,\n                    touched,\n                    isSubmitting,\n                    isValid,\n                    errors,\n                    setFieldValue,\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <NameFormGroup\n                            isNameSeparated={isNameSeparated}\n                            {...{\n                                errors,\n                                values,\n                                touched,\n                                tabIndex,\n                                handleChange,\n                                handleBlur,\n                            }}\n                        />\n\n                        {evolution < 3 && (\n                            <Form.Group\n                                as={Row}\n                                className=\"mb-3\"\n                                controlId=\"gender\"\n                            >\n                                <Form.Label\n                                    column\n                                    sm=\"2\"\n                                    className=\"text-muted\"\n                                >\n                                    Gender *\n                                </Form.Label>\n                                <Col sm=\"10\">\n                                    <Form.Select\n                                        tabIndex={tabIndex}\n                                        disabled={true}\n                                        isValid={\n                                            touched.gender && !errors.gender\n                                        }\n                                        isInvalid={!!errors.gender}\n                                        onChange={handleChange}\n                                        value={values.gender}\n                                        name=\"gender\"\n                                    >\n                                        <option value=\"MALE\">Male</option>\n                                        <option value=\"FEMALE\">Female</option>\n                                    </Form.Select>\n                                </Col>\n                            </Form.Group>\n                        )}\n\n                        {evolution >= 3 && (\n                            <SalutationFormGroup\n                                {...{ errors, values, setFieldValue }}\n                            />\n                        )}\n\n                        <Form.Group as={Row} className=\"mb-3\" controlId=\"email\">\n                            <Form.Label column sm=\"2\" className=\"text-muted\">\n                                Email address *\n                            </Form.Label>\n                            <Col sm=\"10\">\n                                <Form.Control\n                                    tabIndex={tabIndex}\n                                    type=\"email\"\n                                    value={values.emailAddress}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={\n                                        touched.emailAddress &&\n                                        !errors.emailAddress\n                                    }\n                                    isInvalid={!!errors.emailAddress}\n                                    name=\"emailAddress\"\n                                    placeholder=\"Email address\"\n                                />\n                                <Form.Text className=\"text-muted\">\n                                    We'll never share your email address with\n                                    anyone else.\n                                </Form.Text>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.emailAddress}\n                                </Form.Control.Feedback>\n                            </Col>\n                        </Form.Group>\n\n                        <Button\n                            tabIndex={tabIndex}\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >\n                            Save\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n","import Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport { SideNavigation } from './SideNavigation'\nimport { TopNavigation } from './TopNavigation'\nimport { ProfilePageContent } from './ProfilePageContent'\nimport { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport { ButtonGroup } from 'react-bootstrap'\n\nconst App = () => {\n    const [selectedEvolution, setEvolution] = useState(0)\n\n    return (\n        <div style={{ height: '100%' }}>\n            <TopNavigation evolution={selectedEvolution} />\n\n            <Container style={{ marginTop: 30 }}>\n                <Row>\n                    <Col sm={12} md={2} id=\"sidebar-wrapper\">\n                        <SideNavigation evolution={selectedEvolution} />\n                    </Col>\n\n                    <Col md={{ span: 9, offset: 1 }} id=\"page-content-wrapper\">\n                        <ProfilePageContent evolution={selectedEvolution} />\n                    </Col>\n                </Row>\n            </Container>\n\n            <ButtonGroup style={{ position: 'absolute', bottom: 30, left: 30 }}>\n                {Array.from(Array(4).keys()).map((evolution) => (\n                    <Button\n                        key={evolution}\n                        tabIndex=\"-1\"\n                        variant={\n                            evolution === selectedEvolution\n                                ? 'primary'\n                                : 'secondary'\n                        }\n                        onClick={() => setEvolution(evolution)}\n                    >\n                        {evolution}\n                    </Button>\n                ))}\n            </ButtonGroup>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}